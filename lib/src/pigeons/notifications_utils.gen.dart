// Autogenerated from Pigeon (v10.1.6), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class NotificationId {
  NotificationId({
    this.androidId,
    this.iosId,
    this.androidTag,
  });

  int? androidId;

  String? iosId;

  String? androidTag;

  Object encode() {
    return <Object?>[
      androidId,
      iosId,
      androidTag,
    ];
  }

  static NotificationId decode(Object result) {
    result as List<Object?>;
    return NotificationId(
      androidId: result[0] as int?,
      iosId: result[1] as String?,
      androidTag: result[2] as String?,
    );
  }
}

/// Notification payload class.
///
/// `UNNotificationContent` on iOS.
/// `Notification` on Android.
class DeliveredNotification {
  DeliveredNotification({
    required this.id,
    required this.title,
    required this.body,
    required this.subtitle,
    required this.threadIdentifier,
    required this.payload,
    this.androidTag,
  });

  NotificationId id;

  String title;

  String body;

  String subtitle;

  String threadIdentifier;

  /// Notification payload.
  ///
  /// Usually a map of strings to some primitive types.
  Map<Object?, Object?> payload;

  /// Equals to the [id.androidTag].
  String? androidTag;

  Object encode() {
    return <Object?>[
      id.encode(),
      title,
      body,
      subtitle,
      threadIdentifier,
      payload,
      androidTag,
    ];
  }

  static DeliveredNotification decode(Object result) {
    result as List<Object?>;
    return DeliveredNotification(
      id: NotificationId.decode(result[0]! as List<Object?>),
      title: result[1]! as String,
      body: result[2]! as String,
      subtitle: result[3]! as String,
      threadIdentifier: result[4]! as String,
      payload: result[5]! as Map<Object?, Object?>,
      androidTag: result[6] as String?,
    );
  }
}

class _NotificationsUtilsCodec extends StandardMessageCodec {
  const _NotificationsUtilsCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is DeliveredNotification) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else if (value is NotificationId) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:
        return DeliveredNotification.decode(readValue(buffer)!);
      case 129:
        return NotificationId.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class NotificationsUtils {
  /// Constructor for [NotificationsUtils].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  NotificationsUtils({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _NotificationsUtilsCodec();

  /// Returns a list of notifications that are shown in the notification center.
  Future<List<DeliveredNotification?>> getDeliveredNotifications() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.notifications_utils.NotificationsUtils.getDeliveredNotifications',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList = await channel.send(null) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as List<Object?>?)!.cast<DeliveredNotification?>();
    }
  }

  /// Removes the specified notifications from the notification center.
  Future<void> removeDeliveredNotifications(
      List<NotificationId?> arg_ids) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.notifications_utils.NotificationsUtils.removeDeliveredNotifications',
        codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_ids]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else {
      return;
    }
  }
}
